#!/bin/bash
set -e
#set -x
#printenv

VAULT_ADDR_DEFAULT=http://localhost:8200/v1

DISTRO_DEPS="curl jq"
ALPINE_DEPS=${DISTRO_DEPS}
DEBIAN_DEPS=${DISTRO_DEPS}
REDHAT_DEPS=${DISTRO_DEPS}
UNINSTALL_MSG="Add the following script if cleanup is required"

# TODO test
setupApline () {
    apk add --update ${ALPINE_DEPS}
    rm -rf /var/cache/apk/*
    echo ${UNINSTALL_MSG}
    echo "apk del ${DEBIAN_DEPS}"
}

# TODO test
setupDebian () {
    apt-get update -y
    apt-get install -y --no-install-recommends ${DEBIAN_DEPS}
    rm -rf /var/cache/apk/*
    echo ${UNINSTALL_MSG}
    echo "apt-get purge -y --autoremove ${DEBIAN_DEPS}"
}

# TODO test
setupRedhat () {
    yum update -y
    #yum install -y epel-release
    yum install -y ${DEBIAN_DEPS}
    yum clean all
    echo ${UNINSTALL_MSG}
    echo "yum remove -y ${DEBIAN_DEPS}"
}

setup () {
  if [ -f /etc/alpine-release ]; then
    echo "Installing dependencies for Alpine-based OSes..."
    installAlpine
  elif [ -f /etc/debian_version ]; then
    echo "Installing dependencies for Debian-based OSes..."
    installDebian
  elif  [ -f /etc/redhat-release ]; then
    echo "Installing dependencies for RedHat-based OSes..."
    installRedhat
  else
    echo "Sorry, I don't know how to bootstrap the required deps on your operating system!"
    exit 1
  fi
}

bootstrap () {
    # override w/ defaults
    VAULT_ADDR=${VAULT_ADDR=$VAULT_ADDR_DEFAULT}

    # Check required ENV are set
    : "${VAULT_KEY:?ENV VAULT_KEY is required}"
    : "${VAULT_TOKEN:?ENV VAULT_TOKEN is required}"

    # wait for vault to be reachable
    #echo "curl -s -X GET ${VAULT_ADDR}/sys/seal-status"
    for i in {1..5}; do
		echo "[${i} of 5] connect ${VAULT_ADDR}/sys/seal-status"
        curl -s -X GET ${VAULT_ADDR}/sys/seal-status > /dev/null && break

		if [ $[i] -ge 5 ] ; then
			echo "failed to connect to ${VAULT_HOST} on ${VAULT_PORT}";
			exit 1;
		fi

		sleep $i
    done

    # TODO test
    for key in ${VAULT_KEY}; do
        #echo "curl -s -H 'Content-Type: application/json' -X PUT -d \"{\\\"key\\\":\\\"${key}\\\"}\" ${VAULT_ADDR}/sys/unseal"
        curl -s \
            -H 'Content-Type: application/json' \
            -X PUT \
            -d "{\"key\":\"${key}\"}" \
            ${VAULT_ADDR}/sys/unseal > /dev/null
    done

    #echo "curl -s ${VAULT_ADDR}/sys/seal-status"
    res_seal_status=$(curl -s ${VAULT_ADDR}/sys/seal-status)
    if [ "$(echo $res_seal_status | jq -r '.sealed')" == "true" ]; then
        echo "Vault still sealed. $(echo $res_seal_status | jq -r '.progress') / $(echo $res_seal_status | jq -r '.t') Complete"
        exit 1;
    fi

    SECRET_PATH=/secret/
    crawlTree ${SECRET_PATH}

    # Security clean up
    export VAULT_ADDR=
    export VAULT_KEY=
    export VAULT_TOKEN=
    #history -c
}

# bootstrap
# crawl through entire tree allowed by policy
crawlTree () {
    # $@ = /secret/
    if [[ "$@" != */ ]]; then
        # is file
        #echo "curl -s -H \"X-Vault-Token: ${VAULT_TOKEN}\" -X GET ${VAULT_ADDR}${@} | jq -r '.data'"
        secrets=$(curl -s \
            -H "X-Vault-Token: ${VAULT_TOKEN}" \
            -X GET \
            ${VAULT_ADDR}${@} \
            | jq -r '.data'
        )

        while IFS="=" read -r key value; do
            export ${key}=$value
            echo "Created ${key}=$@:${key}"
        done < <(echo $secrets | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]')
    else
        # is folder
        #echo "curl -s -H \"X-Vault-Token: ${VAULT_TOKEN}\" -X LIST ${VAULT_ADDR}${@} | jq -r '.data.keys|.[]'"
        keys=$(curl -s \
            -H "X-Vault-Token: ${VAULT_TOKEN}" \
            -X LIST \
            ${VAULT_ADDR}${@} | jq -r '.data.keys|.[]'
        )
        for item in $keys; do
          crawlTree $@$item
        done
    fi
}

# Routing
case $1 in
    setup)
        setup
        ;;
    bootstrap)
        bootstrap
        ;;
    *)
        echo "Usage: {setup,bootstrap}"
        exit 1;
esac
echo "Done!"